import{_ as s,c as n,o as a,d as e}from"./app.90a49249.js";const d='{"title":"storeToRefs","description":"","frontmatter":{},"headers":[],"relativePath":"pinia/storeToRefs.md"}',t={},p=e(`<h1 id="storetorefs" tabindex="-1">storeToRefs <a class="header-anchor" href="#storetorefs" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>storeToRefs</code>\u4E0E<code>toRefs</code>\u7C7B\u4F3C\uFF0C\u4E0D\u8FC7<code>storeToRefs</code>\u4F1A\u5FFD\u7565\u65B9\u6CD5\u53CA\u975E\u54CD\u5E94\u5F0F\u5BF9\u8C61\u3002</p></div><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">storeToRefs</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">SS</span> <span class="token keyword">extends</span> StoreGeneric<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  store<span class="token operator">:</span> <span class="token constant">SS</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ToRefs<span class="token operator">&lt;</span>
  StoreState<span class="token operator">&lt;</span><span class="token constant">SS</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> StoreGetters<span class="token operator">&lt;</span><span class="token constant">SS</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> PiniaCustomStateProperties<span class="token operator">&lt;</span>StoreState<span class="token operator">&lt;</span><span class="token constant">SS</span><span class="token operator">&gt;&gt;</span>
<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// See https://github.com/vuejs/pinia/issues/852</span>
  <span class="token comment">// It&#39;s easier to just use toRefs() even if it includes more stuff</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isVue2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C\u662Fvue2\u76F4\u63A5\u8FD4\u56DEtoRefs(store)\uFF0C\u5C3D\u7BA1\u5176\u4E2D\u5305\u542B\u5F88\u591Amethods</span>
    <span class="token keyword">return</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u975Evue2\u73AF\u5883\uFF0C\u4F1A\u8FC7\u6EE4store\u4E2D\u7684\u975Eref\u6216reactive\u5BF9\u8C61</span>
    <span class="token comment">// store\u7684\u539F\u59CB\u5BF9\u8C61</span>
    store <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>

    <span class="token keyword">const</span> refs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> ToRefs<span class="token operator">&lt;</span>
      StoreState<span class="token operator">&lt;</span><span class="token constant">SS</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>
        StoreGetters<span class="token operator">&lt;</span><span class="token constant">SS</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>
        PiniaCustomStateProperties<span class="token operator">&lt;</span>StoreState<span class="token operator">&lt;</span><span class="token constant">SS</span><span class="token operator">&gt;&gt;</span>
    <span class="token operator">&gt;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> store<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> value <span class="token operator">=</span> store<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isReactive</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u4F7F\u7528toRef\u83B7\u53D6\u4E00\u4E2A\u65B0\u7684ref</span>
        refs<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span>
          <span class="token comment">// ---</span>
          <span class="token function">toRef</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> refs
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div>`,3),o=[p];function c(r,l,u,i,k,b){return a(),n("div",null,o)}var f=s(t,[["render",c]]);export{d as __pageData,f as default};
