import{_ as n,c as s,o as a,d as p}from"./app.ff295f62.js";const d='{"title":"routerMatcher","description":"","frontmatter":{},"headers":[{"level":3,"title":"addRoute","slug":"addroute"},{"level":3,"title":"resolve","slug":"resolve"},{"level":3,"title":"removeRoute","slug":"removeroute"},{"level":3,"title":"getRoutes","slug":"getroutes"},{"level":3,"title":"getRecordMatcher","slug":"getrecordmatcher"}],"relativePath":"vue-router/routerMatcher.md"}',e={},t=p(`<h1 id="routermatcher" tabindex="-1">routerMatcher <a class="header-anchor" href="#routermatcher" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>matcher</code>\u662F<code>vue-router</code>\u4E2D\u4E00\u4E2A\u91CD\u8981\u7684\u6982\u5FF5\uFF0C\u90A3\u4E48<code>matcher</code>\u662F\u4E2A\u4EC0\u4E48\u4E1C\u897F\u5462\uFF1F\u5B83\u662F\u505A\u4EC0\u4E48\u7684\u5462\uFF1F\u672C\u6587\u5C06\u5BF9<code>matcher</code>\u8FDB\u884C\u8BE6\u7EC6\u89E3\u8BFB\u3002</p><p>\u6587\u4EF6\u4F4D\u7F6E\uFF1A<code>src/matcher/index.ts</code></p></div><p><code>vue-router</code>\u4E2D\u901A\u8FC7\u4E00\u4E2A<code>createRouterMatcher</code>\u6765\u521B\u5EFA\u4E00\u4E2A<code>routerMatcher</code>\u3002<code>createRouterMatcher</code>\u63A5\u6536\u4E24\u4E2A\u53C2\u6570\uFF1A<code>routes</code>\u3001<code>globalOptions</code>\u3002\u5176\u4E2D<code>routes</code>\u4E3A\u6211\u4EEC\u5B9A\u4E49\u7684\u8DEF\u7531\u8868\uFF0C\u4E5F\u5C31\u662F\u5728<code>createRouter</code>\u65F6\u4F20\u5165\u7684<code>options.routes</code>\uFF0C\u800C<code>globalOptions</code>\u5C31\u662F<code>createRouter</code>\u4E2D\u7684<code>options</code>\u3002</p><p>\u9996\u5148\u6211\u4EEC\u770B<code>createRouterMatcher</code>\u51FD\u6570\u7684\u8FD4\u56DE\u503C\uFF0C<code>createRouterMatcher</code>\u8FD4\u56DE\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u8BE5\u5BF9\u8C61\u6709<code>addRoute</code>\u3001<code>resolve</code>\u3001<code>removeRoute</code>\u3001<code>getRoute</code>\u3001<code>getRecordMatcher</code>\u51E0\u4E2A\u5C5E\u6027\uFF0C\u800C\u8FD9\u51E0\u4E2A\u5C5E\u6027\u4ECE\u5176\u547D\u540D\u4E0A\u53EF\u4EE5\u770B\u51FA\u5E94\u8BE5\u662F\u4E00\u4E9B\u8DEF\u7531\u64CD\u4F5C\u65B9\u6CD5\u3002\u73B0\u5728\u6211\u4EEC\u5927\u81F4\u77E5\u9053\u4E86<code>routerMatcher</code>\u662F\u4E2A\u4EC0\u4E48\u4E1C\u897F\u3002<code>routerMatcher</code>\u5305\u542B\u4E86\u5BF9\u8DEF\u7531\u7684\u4E00\u4E9B\u64CD\u4F5C\u65B9\u6CD5\uFF0C\u5176\u4E2D\u5305\u542B\u6DFB\u52A0\u8DEF\u7531\uFF08<code>addRoute</code>\uFF09\u3001\u8DEF\u7531\u5730\u5740\u6807\u51C6\u5316\uFF08<code>resolve</code>\uFF09\u3001\u5220\u9664\u8DEF\u7531\uFF08<code>removeRoute</code>\uFF09\u3001\u83B7\u53D6\u8DEF\u7531\u5B8C\u6574\u5217\u8868\uFF08<code>getRoutes</code>\uFF09\u3001\u83B7\u53D6\u67D0\u4E2A\u8DEF\u7531\u7684<code>matcher</code>\uFF08<code>getRecordMatcher</code>\uFF09</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRouterMatcher</span><span class="token punctuation">(</span>
  routes<span class="token operator">:</span> RouteRecordRaw<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  globalOptions<span class="token operator">:</span> PathParserOptions
<span class="token punctuation">)</span><span class="token operator">:</span> RouterMatcher <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> addRoute<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> removeRoute<span class="token punctuation">,</span> getRoutes<span class="token punctuation">,</span> getRecordMatcher <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u63A5\u4E0B\u6765\u6211\u4EEC\u770B\u4E0B<code>createRouterMatcher</code>\u7684\u4E2D\u95F4\u8FC7\u7A0B\uFF1A</p><p>\u5148\u58F0\u660E\u4E00\u4E2A\u6570\u7EC4\u548C\u4E00\u4E2AMap\uFF0C\u7528\u6765\u5B58\u50A8<code>RouteRecordMatcher</code>\u8DEF\u7531\u8BB0\u5F55\u5339\u914D\u5668\uFF0C\u7136\u540E<code>mergeOptions</code></p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">const</span> matchers<span class="token operator">:</span> RouteRecordMatcher<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> matcherMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span>RouteRecordName<span class="token punctuation">,</span> RouteRecordMatcher<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
globalOptions <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span> strict<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> sensitive<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> PathParserOptions<span class="token punctuation">,</span>
  globalOptions
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>RouteRecordMatcher</code>\u7C7B\u578B\u7684\u5B9A\u4E49\uFF1A</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RouteRecordMatcher</span> <span class="token keyword">extends</span> <span class="token class-name">PathParser</span> <span class="token punctuation">{</span>
  record<span class="token operator">:</span> RouteRecord
  parent<span class="token operator">:</span> RouteRecordMatcher <span class="token operator">|</span> <span class="token keyword">undefined</span>
  children<span class="token operator">:</span> RouteRecordMatcher<span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// aliases that must be removed when removing this record</span>
  alias<span class="token operator">:</span> RouteRecordMatcher<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div><p>\u8FD9\u91CC<code>mergeOptions</code>\u7684\u5B9E\u73B0\u5982\u4E0B\u3002\u5B83\u7684\u4F5C\u7528\u662F\u5982\u679C<code>partialOptions</code>\u4E2D\u6709<code>defaults</code>\u4E2D\u7684<code>key</code>\u503C\uFF0C\u90A3\u4E48\u5C31\u4F7F\u7528<code>partialOptions</code>\u4E2D\u5BF9\u5E94<code>key</code>\u7684\u503C\u66FF\u6362<code>defaults</code>\u4E2D\u7684\u503C</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">mergeOptions</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>defaults<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> partialOptions<span class="token operator">:</span> Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">T</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> defaults<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> key <span class="token keyword">in</span> partialOptions <span class="token operator">?</span> partialOptions<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">!</span> <span class="token operator">:</span> defaults<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> options
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u4E4B\u540E\u4F1A\u58F0\u660E<code>getRecordMatcher</code>\u3001<code>removeRoute</code>\u3001<code>addRoute</code>\u3001<code>insertMatcher</code>\u3001<code>getRoute</code>\u3001<code>resolve</code>\u51E0\u4E2A\u51FD\u6570\uFF0C\u5148\u6682\u65F6\u4E0D\u5173\u5FC3\u8FD9\u51E0\u4E2A\u51FD\u6570\u7684\u5177\u4F53\u7EC6\u8282\u3002</p><p>\u58F0\u660E\u51E0\u4E2A\u51FD\u6570\u4E4B\u540E\uFF0C\u4F1A\u5BF9\u8DEF\u7531\u8FDB\u884C\u521D\u59CB\u5316\uFF1A\u904D\u5386\u8DEF\u7531\u8868\uFF0C\u8C03\u7528<code>addRoute</code>\u65B9\u6CD5\u3002</p><div class="language-ts line-numbers-mode"><pre><code><span class="token comment">// add initial routes</span>
routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>route <span class="token operator">=&gt;</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u6700\u540E\u8FD4\u56DE\u7ED3\u679C\u3002</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">return</span> <span class="token punctuation">{</span> addRoute<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> removeRoute<span class="token punctuation">,</span> getRoutes<span class="token punctuation">,</span> getRecordMatcher <span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>\u63A5\u4E0B\u6765\u91CD\u70B9\u770B\u4E0B\u5728<code>createRouterMatcher</code>\u4E2D\u5B9A\u4E49\u7684\u51E0\u4E2A\u51FD\u6570\uFF1A</p><h3 id="addroute" tabindex="-1"><code>addRoute</code> <a class="header-anchor" href="#addroute" aria-hidden="true">#</a></h3><p><code>addRoute</code>\u51FD\u6570\u63A5\u6536\u4E09\u4E2A\u53C2\u6570\uFF1A<code>record</code>\uFF08\u65B0\u589E\u7684\u8DEF\u7531\uFF09\u3001<code>parent</code>\uFF08\u7236<code>matcher</code>\uFF09\u3001<code>originalRecord</code>\uFF08\u539F\u59CB<code>matcher</code>\uFF09\u3002</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>
  record<span class="token operator">:</span> RouteRecordRaw<span class="token punctuation">,</span>
  parent<span class="token operator">?</span><span class="token operator">:</span> RouteRecordMatcher<span class="token punctuation">,</span>
  originalRecord<span class="token operator">?</span><span class="token operator">:</span> RouteRecordMatcher
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// used later on to remove by name</span>
  <span class="token keyword">const</span> isRootAdd <span class="token operator">=</span> <span class="token operator">!</span>originalRecord
  <span class="token comment">// \u6807\u51C6\u5316\u5316\u8DEF\u7531\u8BB0\u5F55</span>
  <span class="token keyword">const</span> mainNormalizedRecord <span class="token operator">=</span> <span class="token function">normalizeRouteRecord</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span>
  <span class="token comment">// aliasOf\u8868\u793A\u6B64\u8BB0\u5F55\u662F\u5426\u662F\u53E6\u4E00\u4E2A\u8BB0\u5F55\u7684\u522B\u540D</span>
  mainNormalizedRecord<span class="token punctuation">.</span>aliasOf <span class="token operator">=</span> originalRecord <span class="token operator">&amp;&amp;</span> originalRecord<span class="token punctuation">.</span>record
  <span class="token keyword">const</span> options<span class="token operator">:</span> PathParserOptions <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>globalOptions<span class="token punctuation">,</span> record<span class="token punctuation">)</span>
  <span class="token comment">// \u58F0\u660E\u4E00\u4E2A\u8BB0\u5F55\u7684\u6570\u7EC4\u7528\u6765\u5904\u7406\u522B\u540D</span>
  <span class="token keyword">const</span> normalizedRecords<span class="token operator">:</span> <span class="token keyword">typeof</span> mainNormalizedRecord<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    mainNormalizedRecord<span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
  <span class="token comment">// \u5982\u679Crecord\u8BBE\u7F6E\u4E86\u522B\u540D</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;alias&#39;</span> <span class="token keyword">in</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u522B\u540D\u6570\u7EC4</span>
    <span class="token keyword">const</span> aliases <span class="token operator">=</span>
      <span class="token keyword">typeof</span> record<span class="token punctuation">.</span>alias <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">?</span> <span class="token punctuation">[</span>record<span class="token punctuation">.</span>alias<span class="token punctuation">]</span> <span class="token operator">:</span> record<span class="token punctuation">.</span>alias<span class="token operator">!</span>
    <span class="token comment">// \u904D\u5386\u522B\u540D\u6570\u7EC4\uFF0C\u5E76\u6839\u636E\u522B\u540D\u521B\u5EFA\u8BB0\u5F55\u5B58\u50A8\u5230normalizedRecords\u4E2D</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> alias <span class="token keyword">of</span> aliases<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      normalizedRecords<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
        <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> mainNormalizedRecord<span class="token punctuation">,</span> <span class="token punctuation">{</span>
          components<span class="token operator">:</span> originalRecord
            <span class="token operator">?</span> originalRecord<span class="token punctuation">.</span>record<span class="token punctuation">.</span>components
            <span class="token operator">:</span> mainNormalizedRecord<span class="token punctuation">.</span>components<span class="token punctuation">,</span>
          path<span class="token operator">:</span> alias<span class="token punctuation">,</span>
          <span class="token comment">// \u5982\u679C\u6709\u539F\u59CB\u8BB0\u5F55\uFF0CaliasOf\u4E3A\u539F\u59CB\u8BB0\u5F55\uFF0C\u5982\u679C\u6CA1\u6709\u539F\u59CB\u8BB0\u5F55\u5C31\u662F\u5B83\u81EA\u5DF1</span>
          aliasOf<span class="token operator">:</span> originalRecord
            <span class="token operator">?</span> originalRecord<span class="token punctuation">.</span>record
            <span class="token operator">:</span> mainNormalizedRecord<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">typeof</span> mainNormalizedRecord
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> matcher<span class="token operator">:</span> RouteRecordMatcher
  <span class="token keyword">let</span> originalMatcher<span class="token operator">:</span> RouteRecordMatcher <span class="token operator">|</span> <span class="token keyword">undefined</span>

  <span class="token comment">// \u904D\u5386normalizedRecords</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> normalizedRecord <span class="token keyword">of</span> normalizedRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// \u5904\u7406normalizedRecord.path\u4E3A\u5B8C\u6574\u7684path</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> path <span class="token punctuation">}</span> <span class="token operator">=</span> normalizedRecord
    <span class="token comment">// \u5982\u679Cpath\u4E0D\u662F\u4EE5/\u5F00\u5934\uFF0C\u90A3\u4E48\u8BF4\u660E\u5B83\u4E0D\u662F\u6839\u8DEF\u7531\uFF0C\u9700\u8981\u62FC\u63A5\u4E3A\u5B8C\u6574\u7684path</span>
    <span class="token comment">// { path: &#39;/a&#39;, children: [ { path: &#39;b&#39; } ] } -&gt; { path: &#39;/a&#39;, children: [ { path: &#39;/a/b&#39; } ] }</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> parentPath <span class="token operator">=</span> parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path
      <span class="token keyword">const</span> connectingSlash <span class="token operator">=</span>
        parentPath<span class="token punctuation">[</span>parentPath<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;/&#39;</span>
      normalizedRecord<span class="token punctuation">.</span>path <span class="token operator">=</span>
        parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path <span class="token operator">+</span> <span class="token punctuation">(</span>path <span class="token operator">&amp;&amp;</span> connectingSlash <span class="token operator">+</span> path<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u63D0\u793A*\u5E94\u4F7F\u7528\u6B63\u5219\u8868\u793A\u5F0F\u5F62\u5F0F</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> normalizedRecord<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
        <span class="token string">&#39;Catch all routes (&quot;*&quot;) must now be defined using a param with a custom regexp.\\n&#39;</span> <span class="token operator">+</span>
          <span class="token string">&#39;See more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.&#39;</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u521B\u5EFA\u4E00\u4E2A\u8DEF\u7531\u8BB0\u5F55\u5339\u914D\u5668</span>
    matcher <span class="token operator">=</span> <span class="token function">createRouteRecordMatcher</span><span class="token punctuation">(</span>normalizedRecord<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> options<span class="token punctuation">)</span>

    <span class="token comment">// \u68C0\u67E5\u662F\u5426\u6709\u4E22\u5931\u7684\u53C2\u6570</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> parent <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
      <span class="token function">checkMissingParamsInAbsolutePath</span><span class="token punctuation">(</span>matcher<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>

    <span class="token comment">// \u5982\u679C\u6709originalRecord\uFF0C\u5C06matcher\u653E\u5165\u539F\u59CB\u8BB0\u5F55\u7684alias\u4E2D\uFF0C\u4EE5\u4FBF\u540E\u7EED\u80FD\u591F\u5220\u9664</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>originalRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      originalRecord<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span>
      <span class="token comment">// \u68C0\u67E5originalRecord\u4E0Ematcher\u4E2D\u52A8\u6001\u53C2\u6570\u662F\u5426\u76F8\u540C</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">checkSameParams</span><span class="token punctuation">(</span>originalRecord<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u6CA1\u6709originalRecord</span>
      <span class="token comment">// \u56E0\u4E3A\u539F\u59CB\u8BB0\u5F55\u7D22\u5F15\u4E3A0\uFF0C\u6240\u4EE5originalMatcher\u4E3A\u6709\u539F\u59CB\u8BB0\u5F55\u6240\u4EA7\u751F\u7684matcher</span>
      originalMatcher <span class="token operator">=</span> originalMatcher <span class="token operator">||</span> matcher
      <span class="token comment">// \u5982\u679Cmatcher\u4E0D\u662F\u539F\u59CB\u8BB0\u5F55\u4EA7\u751F\u7684matcher\uFF0C\u8BF4\u660E\u6B64\u65F6matcher\u662F\u7531\u522B\u540D\u8BB0\u5F55\u4EA7\u751F\u7684\uFF0C\u6B64\u65F6\u5C06matcher\u653E\u5165originalMatcher.alias\u4E2D</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>originalMatcher <span class="token operator">!==</span> matcher<span class="token punctuation">)</span> originalMatcher<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span>
      <span class="token comment">// \u5982\u679C\u547D\u540D\u5E76\u4E14\u4EC5\u7528\u4E8E\u9876\u90E8\u8BB0\u5F55\uFF0C\u5219\u5220\u9664\u8DEF\u7531\uFF08\u907F\u514D\u5D4C\u5957\u8C03\u7528\uFF09</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isRootAdd <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isAliasRecord</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">removeRoute</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u904D\u5386children\uFF0C\u9012\u5F52addRoute</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;children&#39;</span> <span class="token keyword">in</span> mainNormalizedRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> children <span class="token operator">=</span> mainNormalizedRecord<span class="token punctuation">.</span>children
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addRoute</span><span class="token punctuation">(</span>
          children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
          matcher<span class="token punctuation">,</span>
          originalRecord <span class="token operator">&amp;&amp;</span> originalRecord<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    originalRecord <span class="token operator">=</span> originalRecord <span class="token operator">||</span> matcher
    <span class="token comment">// \u6DFB\u52A0matcher</span>
    <span class="token function">insertMatcher</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u8FD4\u56DE\u4E00\u4E2A\u5220\u9664\u8DEF\u7531\u7684\u65B9\u6CD5</span>
  <span class="token keyword">return</span> originalMatcher
    <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">removeRoute</span><span class="token punctuation">(</span>originalMatcher<span class="token operator">!</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token operator">:</span> noop
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br></div></div><p>\u4E0A\u8FF0\u4EE3\u7801\u4E2D<code>createRouteRecordMatcher</code>\u662F\u4EC0\u4E48\u5462\uFF1F\u5728\u770B<code>createRouteRecordMatcher</code>\u4E4B\u524D\uFF0C\u6211\u4EEC\u5148\u770B\u8FD9\u4E48\u4E24\u4E2A\u51FD\u6570\uFF1A<code>tokenizePath</code>\u3001<code>tokensToParser</code>\u3002<code>tokenizePath</code>\u5C06<code>path</code>\u8F6C\u4E3A\u4E00\u4E2A<code>token</code>\u6570\u7EC4\u3002<code>tokensToParser</code>\u4F1A\u6839\u636E<code>token</code>\u6570\u7EC4\u521B\u5EFA\u4E00\u4E2A\u8DEF\u5F84\u89E3\u6790\u5668\u3002</p><p>\u90A3\u4E48\u4EC0\u4E48\u662F<code>token</code>\u5462\uFF1F\u6211\u4EEC\u770B\u4E0B<code>vue-router</code>\u4E2D<code>token</code>\u7684\u7C7B\u578B\u5B9A\u4E49\uFF1A</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">interface</span> <span class="token class-name">TokenStatic</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Static
  value<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">TokenParam</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Param
  regexp<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  value<span class="token operator">:</span> <span class="token builtin">string</span>
  optional<span class="token operator">:</span> <span class="token builtin">boolean</span>
  repeatable<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">TokenGroup</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Group
  value<span class="token operator">:</span> Exclude<span class="token operator">&lt;</span>Token<span class="token punctuation">,</span> TokenGroup<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Token</span> <span class="token operator">=</span> TokenStatic <span class="token operator">|</span> TokenParam <span class="token operator">|</span> TokenGroup
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><code>token</code>\u5206\u4E3A\u4E09\u79CD\uFF1A</p><ul><li><code>TokenStatic</code>\uFF1A\u4E00\u79CD\u9759\u6001\u7684<code>token</code>\uFF0C\u8BF4\u660E<code>token</code>\u4E0D\u53EF\u53D8</li><li><code>TokenParam</code>\uFF1A\u53C2\u6570<code>token</code>\uFF0C\u8BF4\u660E<code>token</code>\u662F\u4E2A\u53C2\u6570</li><li><code>TokenGroup</code>\uFF1A\u5206\u7EC4\u7684<code>token</code></li></ul><p>\u8FD9\u91CC\u6211\u4EEC\u4E3E\u51E0\u4E2A\u4F8B\u5B50\uFF1A</p><ol><li><code>/one/two/three</code>\u5BF9\u5E94\u7684<code>token</code>\u6570\u7EC4\uFF1A</li></ol><div class="language-ts line-numbers-mode"><pre><code><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token punctuation">{</span> type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Static<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&#39;one&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token punctuation">{</span> type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Static<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&#39;two&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token punctuation">{</span> type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Static<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&#39;three&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li><code>/user/:id</code>\u5BF9\u5E94\u7684<code>token</code>\u6570\u7EC4\u662F:</li></ol><div class="language-ts line-numbers-mode"><pre><code><span class="token punctuation">[</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Static<span class="token punctuation">,</span>
      value<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Param<span class="token punctuation">,</span>
      value<span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span>
      regexp<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
      repeatable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      optional<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ol start="3"><li><code>/:id(\\\\d+)new</code>\u5BF9\u5E94\u7684<code>token</code>\u6570\u7EC4\uFF1A</li></ol><div class="language-ts line-numbers-mode"><pre><code><span class="token punctuation">[</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Param<span class="token punctuation">,</span>
      value<span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span>
      regexp<span class="token operator">:</span> <span class="token string">&#39;\\\\d+&#39;</span><span class="token punctuation">,</span>
      repeatable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      optional<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Static<span class="token punctuation">,</span>
      value<span class="token operator">:</span> <span class="token string">&#39;new&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>\u4ECE\u4E0A\u9762\u51E0\u4E2A\u4F8B\u5B50\u53EF\u4EE5\u770B\u51FA\uFF0C<code>token</code>\u6570\u7EC4\u8BE6\u7EC6\u63CF\u8FF0\u4E86<code>path</code>\u7684\u6BCF\u4E00\u7EA7\u8DEF\u7531\u7684\u7EC4\u6210\u3002\u4F8B\u5982\u7B2C3\u4E2A\u4F8B\u5B50<code>/:id(\\\\d+)new</code>\uFF0C\u901A\u8FC7<code>token</code>\u6570\u7EC4\u6211\u4EEC\u80FD\u591F\u77E5\u9053\u4ED6\u662F\u4E00\u4E2A\u4E00\u7EA7\u8DEF\u7531\uFF08<code>token.lenght = 1</code>\uFF09\uFF0C\u5E76\u4E14\u5B83\u7684\u8FD9\u7EA7\u8DEF\u7531\u662F\u7531\u4E24\u90E8\u5206\u7EC4\u6210\uFF0C\u5176\u4E2D\u7B2C\u4E00\u90E8\u5206\u662F\u53C2\u6570\u90E8\u5206\uFF0C\u7B2C\u4E8C\u90E8\u5206\u662F\u9759\u6001\u7684\uFF0C\u5E76\u4E14\u5728\u53C2\u6570\u90E8\u5206\u8FD8\u8BF4\u660E\u4E86\u53C2\u6570\u7684\u6B63\u5219\u53CA\u662F\u5426\u91CD\u590D\u3001\u662F\u5426\u53EF\u9009\u7684\u914D\u7F6E\u3002</p><p>\u77E5\u9053\u4E86<code>token</code>\u662F\u4EC0\u4E48\uFF0C\u63A5\u4E0B\u6765\u6211\u4EEC\u770B\u4E0B<code>tokenizePath</code>\u662F\u5982\u4F55\u5C06<code>path</code>\u8F6C\u4E3A<code>token</code>\u7684\uFF1A</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> TokenType <span class="token punctuation">{</span>
  Static<span class="token punctuation">,</span>
  Param<span class="token punctuation">,</span>
  Group<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">ROOT_TOKEN</span><span class="token operator">:</span> Token <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Static<span class="token punctuation">,</span>
  value<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">tokenizePath</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Token<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token constant">ROOT_TOKEN</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token comment">// \u5982\u679Cpath\u4E0D\u662F\u4EE5/\u5F00\u5934\uFF0C\u629B\u51FA\u9519\u8BEF</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
      __DEV__
        <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Route paths should start with a &quot;/&quot;: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; should be &quot;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;.</span><span class="token template-punctuation string">\`</span></span>
        <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invalid path &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">function</span> <span class="token function">crash</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ERR (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)/&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>buffer<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// token\u6240\u5904\u72B6\u6001</span>
  <span class="token keyword">let</span> state<span class="token operator">:</span> TokenizerState <span class="token operator">=</span> TokenizerState<span class="token punctuation">.</span>Static
  <span class="token comment">// \u524D\u4E00\u4E2A\u72B6\u6001</span>
  <span class="token keyword">let</span> previousState<span class="token operator">:</span> TokenizerState <span class="token operator">=</span> state
  <span class="token keyword">const</span> tokens<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Token<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">//  \u58F0\u660E\u4E00\u4E2A\u7247\u6BB5\uFF0C\u8BE5\u7247\u6BB5\u6700\u7EC8\u4F1A\u88AB\u5B58\u5165tokens\u4E2D</span>
  <span class="token keyword">let</span> segment<span class="token operator">!</span><span class="token operator">:</span> Token<span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token comment">// \u6DFB\u52A0segment\u81F3tokens\u4E2D\uFF0C\u540C\u65F6segment\u91CD\u65B0\u53D8\u4E3A\u7A7A\u6570\u7EC4</span>
  <span class="token keyword">function</span> <span class="token function">finalizeSegment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">)</span> tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>segment<span class="token punctuation">)</span>
    segment <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> char<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">let</span> buffer<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token comment">// custom regexp for a param</span>
  <span class="token keyword">let</span> customRe<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

  <span class="token comment">// \u6D88\u8D39buffer\uFF0C\u5373\u751F\u6210token\u6DFB\u52A0\u5230segment\u4E2D</span>
  <span class="token keyword">function</span> <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token keyword">return</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> TokenizerState<span class="token punctuation">.</span>Static<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      segment<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Static<span class="token punctuation">,</span>
        value<span class="token operator">:</span> buffer<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
      state <span class="token operator">===</span> TokenizerState<span class="token punctuation">.</span>Param <span class="token operator">||</span>
      state <span class="token operator">===</span> TokenizerState<span class="token punctuation">.</span>ParamRegExp <span class="token operator">||</span>
      state <span class="token operator">===</span> TokenizerState<span class="token punctuation">.</span>ParamRegExpEnd
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">crash</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">A repeatable param (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>buffer<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) must be alone in its segment. eg: &#39;/:ids+.</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span>
      segment<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Param<span class="token punctuation">,</span>
        value<span class="token operator">:</span> buffer<span class="token punctuation">,</span>
        regexp<span class="token operator">:</span> customRe<span class="token punctuation">,</span>
        repeatable<span class="token operator">:</span> char <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span>
        optional<span class="token operator">:</span> char <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">crash</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid state to consume buffer&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u6D88\u8D39\u5B8C\u540E\u7F6E\u7A7A</span>
    buffer <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">addCharToBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    buffer <span class="token operator">+=</span> char
  <span class="token punctuation">}</span>

  <span class="token comment">// \u904D\u5386path</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    char <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span>

    <span class="token comment">// path=&#39;/\\\\:&#39;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;\\\\&#39;</span> <span class="token operator">&amp;&amp;</span> state <span class="token operator">!==</span> TokenizerState<span class="token punctuation">.</span>ParamRegExp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      previousState <span class="token operator">=</span> state
      state <span class="token operator">=</span> TokenizerState<span class="token punctuation">.</span>EscapeNext
      <span class="token keyword">continue</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> TokenizerState<span class="token punctuation">.</span>Static<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// char === /\u65F6\u8BF4\u660E\u5DF2\u7ECF\u904D\u5386\u5B8C\u4E00\u5C42\u8DEF\u7531\uFF0C\u8FD9\u65F6\u9700\u8981\u5C06segment\u6DFB\u52A0\u5230tokens\u4E2D</span>
          <span class="token function">finalizeSegment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// char\u4E3A:\u65F6\uFF0C\u56E0\u4E3A\u6B64\u65F6\u72B6\u6001\u662FTokenizerState.Static\uFF0C\u6240\u4EE5:\u540E\u662F\u53C2\u6570\uFF0C\u6B64\u65F6\u8981\u628Astate\u53D8\u4E3ATokenizerState.Param</span>
          <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          state <span class="token operator">=</span> TokenizerState<span class="token punctuation">.</span>Param
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u5176\u4ED6\u60C5\u51B5\u62FC\u63A5buffer</span>
          <span class="token function">addCharToBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span>

      <span class="token keyword">case</span> TokenizerState<span class="token punctuation">.</span>EscapeNext<span class="token operator">:</span>
        <span class="token function">addCharToBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        state <span class="token operator">=</span> previousState
        <span class="token keyword">break</span>

      <span class="token keyword">case</span> TokenizerState<span class="token punctuation">.</span>Param<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u78B0\u5230(\uFF0C\u56E0\u4E3A\u6B64\u65F6state\u4E3ATokenizerState.Param\uFF0C\u8BF4\u660E\u540E\u9762\u662F\u6B63\u5219\u8868\u8FBE\u5F0F\uFF0C\u6240\u4EE5\u4FEE\u6539state\u4E3ATokenizerState.ParamRegExp</span>
          state <span class="token operator">=</span> TokenizerState<span class="token punctuation">.</span>ParamRegExp
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">VALID_PARAM_RE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">addCharToBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u4F8B\u5982/:id/one\uFF0C\u5F53\u904D\u5386\u5230\u7B2C\u4E8C\u4E2A/\u65F6\uFF0C\u6D88\u8D39buffer\uFF0Cstate\u53D8\u4E3AStatic\uFF0C\u5E76\u8BA9i\u56DE\u9000\uFF0C\u56DE\u9000\u540E\u8FDB\u5165Static</span>
          <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          state <span class="token operator">=</span> TokenizerState<span class="token punctuation">.</span>Static
          <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">!==</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">!==</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">!==</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span> i<span class="token operator">--</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span>

      <span class="token keyword">case</span> TokenizerState<span class="token punctuation">.</span>ParamRegExp<span class="token operator">:</span> 
        <span class="token comment">// it already works by escaping the closing )</span>
        <span class="token comment">// TODO: is it worth handling nested regexp? like :p(?:prefix_([^/]+)_suffix)</span>
        <span class="token comment">// https://paths.esm.dev/?p=AAMeJbiAwQEcDKbAoAAkP60PG2R6QAvgNaA6AFACM2ABuQBB#</span>
        <span class="token comment">// is this really something people need since you can also write</span>
        <span class="token comment">// /prefix_:p()_suffix</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// \u5982\u679C\u662F\\\\)\u7684\u60C5\u51B5,customRe = customRe\u53BB\u6389\\\\ + char</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>customRe<span class="token punctuation">[</span>customRe<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;\\\\&#39;</span><span class="token punctuation">)</span>
            customRe <span class="token operator">=</span> customRe<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> char
          <span class="token keyword">else</span> state <span class="token operator">=</span> TokenizerState<span class="token punctuation">.</span>ParamRegExpEnd <span class="token comment">// \u5982\u679C\u4E0D\u662F\\\\)\u8BF4\u660E\u6B63\u5219\u8868\u8FBE\u5F0F\u5DF2\u7ECF\u904D\u5386\u5B8C</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          customRe <span class="token operator">+=</span> char
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span>

      <span class="token keyword">case</span> TokenizerState<span class="token punctuation">.</span>ParamRegExpEnd<span class="token operator">:</span> <span class="token comment">// \u6B63\u5219\u8868\u8FBE\u5F0F\u5DF2\u7ECF\u904D\u5386\u5B8C</span>
        <span class="token comment">// \u6D88\u8D39buffer</span>
        <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// \u91CD\u7F6Estate\u4E3AStatic</span>
        state <span class="token operator">=</span> TokenizerState<span class="token punctuation">.</span>Static
        <span class="token comment">// \u4F8B\u5982/:id(\\\\d+)new\uFF0C\u5F53\u904D\u5386\u5230n\u65F6\uFF0C\u4F7Fi\u56DE\u9000\uFF0C\u4E0B\u4E00\u6B21\u8FDB\u5165Static\u5206\u652F\u4E2D\u5904\u7406</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">!==</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">!==</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">!==</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span> i<span class="token operator">--</span>
        customRe <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
        <span class="token keyword">break</span>

      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token function">crash</span><span class="token punctuation">(</span><span class="token string">&#39;Unknown state&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u5982\u679C\u904D\u5386\u7ED3\u675F\u540E\uFF0Cstate\u8FD8\u662FParamRegExp\u72B6\u6001\uFF0C\u8BF4\u660E\u6B63\u5219\u662F\u6CA1\u6709\u7ED3\u675F\u7684\uFF0C\u53EF\u80FD\u6F0F\u4E86)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> TokenizerState<span class="token punctuation">.</span>ParamRegExp<span class="token punctuation">)</span>
    <span class="token function">crash</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Unfinished custom RegExp for param &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>buffer<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

  <span class="token comment">// \u904D\u5386\u5B8Cpath\uFF0C\u8FDB\u884C\u6700\u540E\u4E00\u6B21\u6D88\u8D39buffer</span>
  <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// \u5C06segment\u653E\u5165tokens</span>
  <span class="token function">finalizeSegment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// \u6700\u540E\u8FD4\u56DEtokens</span>
  <span class="token keyword">return</span> tokens
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br></div></div><p>\u8FD8\u662F\u4EE5\u7B2C3\u4E2A\u4E3A\u4F8B<code>/:id(\\\\d+)new</code>\u3001\uFF0C\u6211\u4EEC\u770B\u4E00\u4E0B<code>tokenizePath</code>\u7684\u8FC7\u7A0B\uFF1A</p><ol><li>\u904D\u5386\u524D\u7684\u72B6\u6001\uFF1A<code>state=TokenizerState.Static; previousState=TokenizerState.Static; tokens=[]; segment; buffer=&#39;&#39;; i=0; char=&#39;&#39;; customRe=&#39;&#39;;</code></li><li>\u5F53<code>i=0</code>\u65F6\uFF0C\u8FDB\u5165<code>TokenizerState.Static</code>\u5206\u652F\uFF0C\u6B64\u65F6<code>char=&#39;/&#39;; buffer=&#39;&#39;;</code>\uFF0C\u4E0D\u4F1A\u6267\u884C<code>consumeBuffer</code>\uFF0C\u6267\u884C<code>finalizeSegment</code>\uFF0C\u8BE5\u8F6E\u7ED3\u675F\u540E\u53D1\u751F\u53D8\u5316\u7684\u662F<code>segment=[]; i=1; char=&#39;/&#39;;</code></li><li>\u5F53<code>i=1</code>\u65F6\uFF0C\u8FDB\u5165<code>TokenizerState.Static</code>\u5206\u652F\uFF0C\u6B64\u65F6<code>char=&#39;:&#39;; buffer=&#39;&#39;;</code>\uFF0C\u6267\u884C<code>consumeBuffer</code>\uFF0C\u56E0\u4E3A<code>buffer=&#39;&#39;</code>\uFF0C\u6240\u4EE5<code>consumeBuffer</code>\u4E2D\u4EC0\u4E48\u90FD\u6CA1\u505A\uFF0C\u6700\u540E<code>state=TokenizerState.Param</code>\uFF0C\u8BE5\u8F6E\u7ED3\u675F\u540E\u53D1\u751F\u53D8\u5316\u7684\u662F<code>state=TokenizerState.Param; i=2; char=&#39;:&#39;;</code></li><li>\u5F53<code>i=2</code>\u65F6\uFF0C\u8FDB\u5165<code>TokenizerState.Param</code>\u5206\u652F\uFF0C\u6B64\u65F6<code>char=&#39;i&#39;; buffer=&#39;&#39;;</code>\uFF0C\u6267\u884C<code>addCharToBuffer</code>\uFF0C\u8BE5\u8F6E\u7ED3\u675F\u540E\u53D1\u751F\u53D8\u5316\u7684\u662F<code>buffer=&#39;i&#39;; i=3; char=&#39;i&#39;;</code></li><li>\u5F53<code>i=3</code>\u65F6\uFF0C\u8FC7\u7A0B\u540C4\uFF0C\u8BE5\u8F6E\u7ED3\u675F\u540E\u53D1\u751F\u53D8\u5316\u7684\u662F<code>buffer=&#39;id&#39;; i=4; char=&#39;d&#39;;</code></li><li>\u5F53<code>i=4</code>\u65F6\uFF0C\u8FDB\u5165<code>TokenizerState.Param</code>\u5206\u652F\uFF0C\u6B64\u65F6<code>char=&#39;(&#39;; buffer=&#39;id&#39;;</code>\uFF0C\u6B64\u65F6\u4F1A\u5C06<code>state</code>\u53D8\u4E3A<code>TokenizerState.ParamRegExp</code>\uFF0C\u8BF4\u660E<code>(</code>\u540E\u9762\u662F\u6B63\u5219\uFF0C\u8BE5\u8F6E\u7ED3\u675F\u540E\u53D1\u751F\u53D8\u5316\u7684\u662F<code>state=TokenizerState.ParamRegExp; i=5; char=&#39;(&#39;;</code></li><li>\u5F53<code>i=5</code>\u65F6\uFF0C\u8FDB\u5165<code>TokenizerState.ParamRegExp</code>\u5206\u652F\uFF0C\u6B64\u65F6<code>char=&#39;\\\\&#39;; buffer=&#39;id&#39;;</code>\uFF0C\u6267\u884C<code>customRe+=char</code>\uFF0C\u8BE5\u8F6E\u7ED3\u675F\u540E\u53D1\u751F\u53D8\u5316\u7684\u662F<code>i=6; char=&#39;\\\\&#39;; customRe=&#39;\\\\&#39;</code></li><li>\u5F53<code>i=6</code>\u3001<code>i=7</code>\u65F6\uFF0C\u8FC7\u7A0B\u540C5\uFF0C\u6700\u7EC8\u53D1\u751F\u53D8\u5316\u7684\u662F<code>i=8; char=&#39;+&#39;; customRe=&#39;\\\\d+&#39;</code></li><li>\u5F53<code>i=8</code>\u65F6\uFF0C\u8FDB\u5165<code>TokenizerState.ParamRegExp</code>\u5206\u652F\uFF0C\u6B64\u65F6<code>char=&#39;)&#39;; buffer=&#39;id&#39;; customRe=&#39;\\\\d+&#39;</code>\uFF0C<code>state</code>\u53D8\u4E3A<code>TokenizerState.ParamRegExpEnd</code>\uFF0C\u4EE3\u8868\u6B63\u5219\u7ED3\u675F\uFF0C\u8BE5\u8F6E\u7ED3\u675F\u540E\u53D1\u751F\u53D8\u5316\u7684\u662F<code>state=TokenizerState.ParamRegExpEnd; i=9; char=&#39;)&#39;;</code></li><li>\u5F53<code>i=9</code>\u65F6\uFF0C\u8FDB\u5165<code>TokenizerState.ParamRegExpEnd</code>\u5206\u652F\uFF0C\u6B64\u65F6<code>char=&#39;n&#39;; buffer=&#39;id&#39;; customRe=&#39;\\\\d+&#39;</code>\uFF0C\u6267\u884C<code>consumeBuffer</code>\uFF0C\u5728<code>consumeBuffer</code>\u4E2D\u4F1A\u5411<code>segment</code>\u6DFB\u52A0\u4E00\u6761<code>token</code>\u5E76\u5C06<code>buffer</code>\u7F6E\u4E3A\u7A7A\u5B57\u7B26\u4E32\uFF0C\u8BE5<code>token</code>\u662F<code>{type: TokenType.Param, value: &#39;id&#39;, regexp: &#39;\\\\d+&#39;, repeatable: false, optional: false}</code>\uFF0C\u6267\u884C\u5B8C<code>consumeBuffer</code>\u540E\uFF0C<code>state</code>\u91CD\u7F6E\u4E3A<code>Static</code>\uFF0C<code>customRe</code>\u91CD\u7F6E\u4E3A\u7A7A\u5B57\u7B26\u4E32\uFF0C<code>i</code>\u56DE\u90001\uFF0C\u8BE5\u8F6E\u7ED3\u675F\u540E\u53D1\u751F\u53D8\u5316\u7684\u662F<code>segment=[{...}]; state=TokenizerState.Static; buffer=&#39;&#39;; customRe=&#39;&#39;; char=&#39;n&#39;;</code>\uFF0C\u6CE8\u610F\u6B64\u65F6<code>i=9</code></li><li>\u4E0A\u4E00\u8F6E\u7ED3\u675F\u540E<code>i=9</code>\uFF0C\u8FDB\u5165<code>TokenizerState.Static</code>\u5206\u652F\uFF0C\u6B64\u65F6\u6B64\u65F6<code>char=&#39;n&#39;; buffer=&#39;&#39;;</code>\uFF0C\u6267\u884C<code>addCharToBuffer</code>\u65B9\u6CD5\uFF0C\u8BE5\u8F6E\u7ED3\u675F\u540E\u53D1\u751F\u53D8\u5316\u7684\u662F<code>buffer=&#39;n&#39;; i=10; char=&#39;n&#39;</code></li><li>\u5F53<code>i=10</code>\u3001<code>i=11</code>\u65F6\uFF0C\u8FC7\u7A0B\u540C11\uFF0C\u7ED3\u675F\u540E\u53D1\u751F\u53D8\u5316\u7684\u662F<code>buffer=&#39;new&#39;; i=12; char=&#39;w&#39;</code></li><li>\u5F53<code>i=12</code>\uFF0C\u7ED3\u675F\u904D\u5386\uFF0C\u6267\u884C<code>consumeBuffer</code>\uFF0C\u5411<code>segment</code>\u6DFB\u52A0<code>{type: TokenType.Static, value: &#39;new&#39;}</code>\u4E00\u6761\u8BB0\u5F55\u5E76\u5C06<code>buffer</code>\u7F6E\u4E3A\u7A7A\u5B57\u7B26\u4E32\u3002\u7136\u540E\u6267\u884C<code>finalizeSegment</code>\uFF0C\u5C06<code>segment</code>\u6DFB\u52A0\u5230<code>tokens</code>\u4E2D\uFF0C\u5E76\u5C06<code>segment</code>\u7F6E\u4E3A\u7A7A\u6570\u7EC4\u3002\u6700\u540E\u8FD4\u56DE\u7684<code>tokens</code>\u5982\u4E0B\uFF1A</li></ol><div class="language-ts line-numbers-mode"><pre><code><span class="token punctuation">[</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Param<span class="token punctuation">,</span>
      value<span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span>
      regexp<span class="token operator">:</span> <span class="token string">&#39;\\\\d+&#39;</span><span class="token punctuation">,</span>
      repeatable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      optional<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Static<span class="token punctuation">,</span>
      value<span class="token operator">:</span> <span class="token string">&#39;new&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>\u73B0\u5728\u6211\u4EEC\u6E05\u695A\u4E86<code>tokens</code>\u7684\u751F\u6210\uFF0C\u63A5\u4E0B\u91CC\u6211\u4EEC\u770B\u4E0B<code>tokensToParser</code>\u3002</p><p><code>tokensToParser</code>\u51FD\u6570\u63A5\u6536\u4E00\u4E2A<code>token</code>\u6570\u7EC4\u548C\u4E00\u4E2A\u53EF\u9009\u7684<code>extraOptions</code>\uFF0C\u5728\u51FD\u6570\u4E2D\u4F1A\u6784\u9020\u51FA<code>path</code>\u5BF9\u5E94\u7684\u6B63\u5219\u8868\u8FBE\u5F0F\u3001\u52A8\u6001\u53C2\u6570\u5217\u8868<code>keys</code>\u3001<code>token</code>\u5BF9\u5E94\u7684\u5206\u6570\uFF08\u76F8\u5F53\u4E8E\u6743\u91CD\uFF0C\u8BE5\u5206\u6570\u5728\u540E\u7EED<code>path</code>\u7684\u6BD4\u8F83\u4E2D\u4F1A\u7528\u5230\uFF09\u3001\u4E00\u4E2A\u53EF\u4EE5\u4ECE<code>path</code>\u4E2D\u63D0\u53D6\u52A8\u6001\u53C2\u6570\u7684\u51FD\u6570\uFF08<code>parse</code>\uFF09\u3001\u4E00\u4E2A\u53EF\u4EE5\u6839\u636E\u4F20\u5165\u7684\u52A8\u6001\u53C2\u6570\u751F\u6210<code>path</code>\u7684\u51FD\u6570\uFF08<code>stringify</code>\uFF09\uFF0C\u6700\u540E\u5C06\u5176\u7EC4\u6210\u4E00\u4E2A\u5BF9\u8C61\u8FD4\u56DE\u3002</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">const</span> <span class="token constant">BASE_PATH_PARSER_OPTIONS</span><span class="token operator">:</span> Required<span class="token operator">&lt;</span>_PathParserOptions<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  sensitive<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  strict<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  start<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  end<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">REGEX_CHARS_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[.+*?^\${}()[\\]/\\\\]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">tokensToParser</span><span class="token punctuation">(</span>
  segments<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Token<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  extraOptions<span class="token operator">?</span><span class="token operator">:</span> _PathParserOptions
<span class="token punctuation">)</span><span class="token operator">:</span> PathParser <span class="token punctuation">{</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">BASE_PATH_PARSER_OPTIONS</span><span class="token punctuation">,</span> extraOptions<span class="token punctuation">)</span>

  <span class="token comment">// the amount of scores is the same as the length of segments except for the root segment &quot;/&quot;</span>
  <span class="token keyword">const</span> score<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// \u6B63\u5219\u7684\u5B57\u7B26\u4E32\u5F62\u5F0F</span>
  <span class="token keyword">let</span> pattern <span class="token operator">=</span> options<span class="token punctuation">.</span>start <span class="token operator">?</span> <span class="token string">&#39;^&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
  <span class="token comment">// \u4FDD\u5B58\u8DEF\u7531\u4E2D\u7684\u52A8\u6001\u53C2\u6570</span>
  <span class="token keyword">const</span> keys<span class="token operator">:</span> PathParserParamKey<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> segment <span class="token keyword">of</span> segments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7528\u4E00\u4E2A\u6570\u7EC4\u4FDD\u5B58token\u7684\u5206\u6570</span>
    <span class="token keyword">const</span> segmentScores<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> segment<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>PathScore<span class="token punctuation">.</span>Root<span class="token punctuation">]</span>

    <span class="token comment">// options.strict\u4EE3\u8868\u662F\u5426\u7981\u6B62\u5C3E\u90E8/\uFF0C\u5982\u679C\u7981\u6B62\u4E86pattern\u8FFD\u52A0/</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>strict <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>segment<span class="token punctuation">.</span>length<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;/&#39;</span>
    <span class="token comment">// \u5F00\u59CB\u904D\u5386\u6BCF\u4E2Atoken</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> tokenIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> tokenIndex <span class="token operator">&lt;</span> segment<span class="token punctuation">.</span>length<span class="token punctuation">;</span> tokenIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> token <span class="token operator">=</span> segment<span class="token punctuation">[</span>tokenIndex<span class="token punctuation">]</span>
      <span class="token comment">// \u5F53\u524D\u5B50\u7247\u6BB5\uFF08\u5355\u4E2Atoken\uFF09\u7684\u5206\u6570</span>
      <span class="token keyword">let</span> subSegmentScore<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span>
        PathScore<span class="token punctuation">.</span>Segment <span class="token operator">+</span>
        <span class="token punctuation">(</span>options<span class="token punctuation">.</span>sensitive <span class="token operator">?</span> PathScore<span class="token punctuation">.</span>BonusCaseSensitive <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> TokenType<span class="token punctuation">.</span>Static<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5728\u5F00\u59CB\u4E00\u4E2A\u65B0\u7684\u7247\u6BB5\u524Dpattern\u9700\u8981\u6DFB\u52A0/</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tokenIndex<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;/&#39;</span>
        <span class="token comment">// \u5C06token.value\u8FFD\u52A0\u5230pattern\u540E\uFF0C\u8FFD\u52A0\u524Dtoken.value\u4E2D\u7684.\u3001+\u3001*\u3001?\u3001^\u3001$\u7B49\u5B57\u7B26\u524D\u9762\u52A0\u4E0A\\\\</span>
        <span class="token comment">// \u5173\u4E8Ereplace\uFF0C\u53C2\u8003MDN\uFF1Ahttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace</span>
        pattern <span class="token operator">+=</span> token<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">REGEX_CHARS_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\$&amp;&#39;</span><span class="token punctuation">)</span>
        subSegmentScore <span class="token operator">+=</span> PathScore<span class="token punctuation">.</span>Static
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> TokenType<span class="token punctuation">.</span>Param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> repeatable<span class="token punctuation">,</span> optional<span class="token punctuation">,</span> regexp <span class="token punctuation">}</span> <span class="token operator">=</span> token
        keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          name<span class="token operator">:</span> value<span class="token punctuation">,</span>
          repeatable<span class="token punctuation">,</span>
          optional<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> re <span class="token operator">=</span> regexp <span class="token operator">?</span> regexp <span class="token operator">:</span> <span class="token constant">BASE_PARAM_PATTERN</span>
        <span class="token comment">// \u7528\u6237\u81EA\u5B9A\u4E49\u7684\u6B63\u5219\u9700\u8981\u9A8C\u8BC1\u6B63\u5219\u7684\u6B63\u786E\u6027</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>re <span class="token operator">!==</span> <span class="token constant">BASE_PARAM_PATTERN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          subSegmentScore <span class="token operator">+=</span> PathScore<span class="token punctuation">.</span>BonusCustomRegExp
          <span class="token comment">// \u4F7F\u7528\u524D\u786E\u4FDD\u6B63\u5219\u65F6\u6B63\u786E\u7684</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invalid custom RegExp for param &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">): </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
                <span class="token punctuation">(</span>err <span class="token keyword">as</span> Error<span class="token punctuation">)</span><span class="token punctuation">.</span>message
            <span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// /:chapters*</span>
        <span class="token comment">// when we repeat we must take care of the repeating leading slash</span>
        <span class="token keyword">let</span> subPattern <span class="token operator">=</span> repeatable <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">((?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)(?:/(?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">))*)</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>

        <span class="token comment">// prepend the slash if we are starting a new segment</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tokenIndex<span class="token punctuation">)</span>
          subPattern <span class="token operator">=</span>
            <span class="token comment">// avoid an optional / if there are more segments e.g. /:p?-static</span>
            <span class="token comment">// or /:p?-:p2</span>
            optional <span class="token operator">&amp;&amp;</span> segment<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span>
              <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(?:/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>subPattern<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
              <span class="token operator">:</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> subPattern
        <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> subPattern <span class="token operator">+=</span> <span class="token string">&#39;?&#39;</span>

        pattern <span class="token operator">+=</span> subPattern

        subSegmentScore <span class="token operator">+=</span> PathScore<span class="token punctuation">.</span>Dynamic
        <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> subSegmentScore <span class="token operator">+=</span> PathScore<span class="token punctuation">.</span>BonusOptional
        <span class="token keyword">if</span> <span class="token punctuation">(</span>repeatable<span class="token punctuation">)</span> subSegmentScore <span class="token operator">+=</span> PathScore<span class="token punctuation">.</span>BonusRepeatable
        <span class="token keyword">if</span> <span class="token punctuation">(</span>re <span class="token operator">===</span> <span class="token string">&#39;.*&#39;</span><span class="token punctuation">)</span> subSegmentScore <span class="token operator">+=</span> PathScore<span class="token punctuation">.</span>BonusWildcard
      <span class="token punctuation">}</span>

      segmentScores<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>subSegmentScore<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    score<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>segmentScores<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// only apply the strict bonus to the last score</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>strict <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> i <span class="token operator">=</span> score<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
    score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> PathScore<span class="token punctuation">.</span>BonusStrict
  <span class="token punctuation">}</span>

  <span class="token comment">// TODO: dev only warn double trailing slash</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>strict<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;/?&#39;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>end<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;$&#39;</span>
  <span class="token comment">// allow paths like /dynamic to only match dynamic or dynamic/... but not dynamic_something_else</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>strict<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;(?:/|$)&#39;</span>

  <span class="token comment">// \u6839\u636E\u7EC4\u88C5\u597D\u7684pattern\u521B\u5EFA\u6B63\u5219\u8868\u8FBE\u5F0F\uFF0Coptions.sensitive\u51B3\u5B9A\u662F\u5426\u533A\u5206\u5927\u5C0F\u5199</span>
  <span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> options<span class="token punctuation">.</span>sensitive <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// \u6839\u636Epath\u83B7\u53D6\u52A8\u6001\u53C2\u6570\u5BF9\u8C61</span>
  <span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> PathParams <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> match <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span>
    <span class="token keyword">const</span> params<span class="token operator">:</span> PathParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> match<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> match<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
      params<span class="token punctuation">[</span>key<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>repeatable <span class="token operator">?</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> value
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> params
  <span class="token punctuation">}</span>

  <span class="token comment">// \u6839\u636E\u4F20\u5165\u7684\u52A8\u6001\u53C2\u6570\u5BF9\u8C61\uFF0C\u8F6C\u4E3A\u5BF9\u5E94\u7684path</span>
  <span class="token keyword">function</span> <span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token operator">:</span> PathParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token comment">// for optional parameters to allow to be empty</span>
    <span class="token keyword">let</span> avoidDuplicatedSlash<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> segment <span class="token keyword">of</span> segments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>avoidDuplicatedSlash <span class="token operator">||</span> <span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> path <span class="token operator">+=</span> <span class="token string">&#39;/&#39;</span>
      avoidDuplicatedSlash <span class="token operator">=</span> <span class="token boolean">false</span>

      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> token <span class="token keyword">of</span> segment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> TokenType<span class="token punctuation">.</span>Static<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          path <span class="token operator">+=</span> token<span class="token punctuation">.</span>value
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> TokenType<span class="token punctuation">.</span>Param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> repeatable<span class="token punctuation">,</span> optional <span class="token punctuation">}</span> <span class="token operator">=</span> token
          <span class="token keyword">const</span> param<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token keyword">in</span> params <span class="token operator">?</span> params<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>repeatable<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Provided param &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is an array but it is not repeatable (* or + modifiers)</span><span class="token template-punctuation string">\`</span></span>
            <span class="token punctuation">)</span>
          <span class="token keyword">const</span> text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">?</span> param<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> param
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// if we have more than one optional param like /:a?-static and there are more segments, we don&#39;t need to</span>
              <span class="token comment">// care about the optional param</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> segments<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// remove the last slash as we could be at the end</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token comment">// do not append a slash on the next iteration</span>
                <span class="token keyword">else</span> avoidDuplicatedSlash <span class="token operator">=</span> <span class="token boolean">true</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Missing required param &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          path <span class="token operator">+=</span> text
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> path
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    re<span class="token punctuation">,</span>
    score<span class="token punctuation">,</span>
    keys<span class="token punctuation">,</span>
    parse<span class="token punctuation">,</span>
    stringify<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br></div></div><p>\u6E05\u695A\u4E86<code>tokensToParser</code>\u548C<code>tokenizePath</code>\uFF0C\u6211\u4EEC\u6765\u770B<code>createRouteRecordMatcher</code>\u7684\u5B9E\u73B0\uFF1A</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRouteRecordMatcher</span><span class="token punctuation">(</span>
  record<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  parent<span class="token operator">:</span> RouteRecordMatcher <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> PathParserOptions
<span class="token punctuation">)</span><span class="token operator">:</span> RouteRecordMatcher <span class="token punctuation">{</span>
  <span class="token comment">// \u751F\u6210parser\u5BF9\u8C61</span>
  <span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">tokensToParser</span><span class="token punctuation">(</span><span class="token function">tokenizePath</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>

  <span class="token comment">// \u5982\u679C\u6709\u91CD\u590D\u7684\u52A8\u6001\u53C2\u6570\u547D\u540D\u8FDB\u884C\u63D0\u793A</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> existingKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> parser<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>existingKeys<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Found duplicated params with name &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; for path &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. Only the last one will be available on &quot;$route.params&quot;.</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span>
      existingKeys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// </span>
  <span class="token keyword">const</span> matcher<span class="token operator">:</span> RouteRecordMatcher <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>parser<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    record<span class="token punctuation">,</span>
    parent<span class="token punctuation">,</span>
    <span class="token comment">// these needs to be populated by the parent</span>
    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    alias<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u4E24\u8005\u90FD\u662Falias\u6216\u4E24\u8005\u90FD\u4E0D\u662Falias</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>aliasOf <span class="token operator">===</span> <span class="token operator">!</span>parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>aliasOf<span class="token punctuation">)</span>
      parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> matcher
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h3 id="resolve" tabindex="-1"><code>resolve</code> <a class="header-anchor" href="#resolve" aria-hidden="true">#</a></h3><p><code>resolve</code>\u6839\u636E\u4F20\u5165\u7684<code>location</code>\u8FDB\u884C\u8DEF\u7531\u5339\u914D\uFF0C\u627E\u5230\u5BF9\u5E94\u7684<code>matcher</code>\u7684\u8DEF\u7531\u4FE1\u606F\u3002\u65B9\u6CD5\u63A5\u6536\u4E00\u4E2A<code>location</code>\u548C<code>currentLocation</code>\u53C2\u6570\uFF0C\u8FD4\u56DE\u4E00\u4E2A<code>MatcherLocation</code>\u7C7B\u578B\u7684\u5BF9\u8C61\uFF0C\u8BE5\u5BF9\u8C61\u7684\u5C5E\u6027\u5305\u542B\uFF1A<code>name</code>\u3001<code>path</code>\u3001<code>params</code>\u3001<code>matched</code>\u3001<code>meta</code>\u3002</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>
    location<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>MatcherLocationRaw<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    currentLocation<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>MatcherLocation<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> MatcherLocation <span class="token punctuation">{</span>
    <span class="token keyword">let</span> matcher<span class="token operator">:</span> RouteRecordMatcher <span class="token operator">|</span> <span class="token keyword">undefined</span>
    <span class="token keyword">let</span> params<span class="token operator">:</span> PathParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">let</span> path<span class="token operator">:</span> MatcherLocation<span class="token punctuation">[</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> name<span class="token operator">:</span> MatcherLocation<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> location <span class="token operator">&amp;&amp;</span> location<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5982\u679Clocation\u5B58\u5728name\u5C5E\u6027\uFF0C\u53EF\u6839\u636Ename\u4ECEmatcherMap\u83B7\u53D6matcher</span>
      matcher <span class="token operator">=</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token generic-function"><span class="token function">createRouterError</span><span class="token generic class-name"><span class="token operator">&lt;</span>MatcherError<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ErrorTypes<span class="token punctuation">.</span><span class="token constant">MATCHER_NOT_FOUND</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          location<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

      name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name
      <span class="token comment">// \u5408\u5E76location.params\u548CcurrentLocation\u4E2D\u7684params</span>
      params <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
        <span class="token function">paramsFromLocation</span><span class="token punctuation">(</span>
          currentLocation<span class="token punctuation">.</span>params<span class="token punctuation">,</span>
          matcher<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>k <span class="token operator">=&gt;</span> <span class="token operator">!</span>k<span class="token punctuation">.</span>optional<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=&gt;</span> k<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        location<span class="token punctuation">.</span>params
      <span class="token punctuation">)</span>
      <span class="token comment">// \u5982\u679C\u4E0D\u80FD\u901A\u8FC7params\u8F6C\u4E3Apath\u629B\u51FA\u9519\u8BEF</span>
      path <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span> <span class="token keyword">in</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5982\u679Clocation\u5B58\u5728path\u5C5E\u6027\uFF0C\u6839\u636Epath\u4ECEmatchers\u83B7\u53D6\u5BF9\u5E94matcher</span>
      path <span class="token operator">=</span> location<span class="token punctuation">.</span>path

      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The Matcher cannot resolve relative paths but received &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. Unless you directly called \\\`matcher.resolve(&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;)\\\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/router.</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      matcher <span class="token operator">=</span> matchers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u901A\u8FC7parse\u51FD\u6570\u83B7\u53D6params</span>
        params <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">!</span>
        name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u5982\u679Clocation\u4E2D\u6CA1\u6709name\u3001path\u5C5E\u6027\uFF0C\u5C31\u4F7F\u7528currentLocation\u7684name\u6216path\u83B7\u53D6matcher</span>
      matcher <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>name
        <span class="token operator">?</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token operator">:</span> matchers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token generic-function"><span class="token function">createRouterError</span><span class="token generic class-name"><span class="token operator">&lt;</span>MatcherError<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ErrorTypes<span class="token punctuation">.</span><span class="token constant">MATCHER_NOT_FOUND</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          location<span class="token punctuation">,</span>
          currentLocation<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name
      params <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> currentLocation<span class="token punctuation">.</span>params<span class="token punctuation">,</span> location<span class="token punctuation">.</span>params<span class="token punctuation">)</span>
      path <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u4F7F\u7528\u4E00\u4E2A\u6570\u7EC4\u5B58\u50A8\u5339\u914D\u5230\u7684\u6240\u6709\u8DEF\u7531</span>
    <span class="token keyword">const</span> matched<span class="token operator">:</span> MatcherLocation<span class="token punctuation">[</span><span class="token string">&#39;matched&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> parentMatcher<span class="token operator">:</span> RouteRecordMatcher <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> matcher
    <span class="token keyword">while</span> <span class="token punctuation">(</span>parentMatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u7236\u8DEF\u7531\u59CB\u7EC8\u5728\u6570\u7EC4\u7684\u5F00\u5934</span>
      matched<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>parentMatcher<span class="token punctuation">.</span>record<span class="token punctuation">)</span>
      parentMatcher <span class="token operator">=</span> parentMatcher<span class="token punctuation">.</span>parent
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      name<span class="token punctuation">,</span>
      path<span class="token punctuation">,</span>
      params<span class="token punctuation">,</span>
      matched<span class="token punctuation">,</span>
      meta<span class="token operator">:</span> <span class="token function">mergeMetaFields</span><span class="token punctuation">(</span>matched<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div><h3 id="removeroute" tabindex="-1"><code>removeRoute</code> <a class="header-anchor" href="#removeroute" aria-hidden="true">#</a></h3><p>\u5220\u9664\u8DEF\u7531\u3002\u63A5\u6536\u4E00\u4E2A<code>matcherRef</code>\u53C2\u6570\uFF0C<code>removeRoute</code>\u4F1A\u5C06<code>matcherRef</code>\u5BF9\u5E94\u7684<code>matcher</code>\u4ECE<code>matcherMap</code>\u548C<code>matchers</code>\u4E2D\u5220\u9664\uFF0C\u5E76\u6E05\u7A7A<code>matcherRef</code>\u5BF9\u5E94<code>matcher</code>\u7684<code>children</code>\u4E0E<code>alias</code>\u5C5E\u6027\u3002\u7531\u4E8E<code>matcherRef</code>\u5BF9\u5E94\u7684<code>matcher</code>\u88AB\u5220\u9664\u540E\uFF0C\u5176\u5B50\u5B59\u53CA\u522B\u540D\u4E5F\u5C31\u6CA1\u7528\u4E86\uFF0C\u4E5F\u9700\u8981\u628A\u4ED6\u4EEC\u4ECE<code>matcherMap</code>\u4E2D\u548C<code>matchers</code>\u4E2D\u5220\u9664\u3002</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">removeRoute</span><span class="token punctuation">(</span>matcherRef<span class="token operator">:</span> RouteRecordName <span class="token operator">|</span> RouteRecordMatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u5982\u679C\u662F\u8DEF\u7531\u540D\u5B57\uFF1Astring\u6216symbol</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRouteName</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> matcher <span class="token operator">=</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5220\u9664matcher</span>
      matcherMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">)</span>
      matchers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>matchers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token comment">// \u6E05\u7A7Amatcher\u4E2D\u7684children\u4E0Ealias\uFF0C</span>
      matcher<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>removeRoute<span class="token punctuation">)</span>
      matcher<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>removeRoute<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> index <span class="token operator">=</span> matchers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      matchers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>matcherRef<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">)</span> matcherMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
      matcherRef<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>removeRoute<span class="token punctuation">)</span>
      matcherRef<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>removeRoute<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="getroutes" tabindex="-1"><code>getRoutes</code> <a class="header-anchor" href="#getroutes" aria-hidden="true">#</a></h3><p>\u83B7\u53D6\u6240\u6709<code>matcher</code>\u3002</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> matchers
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="getrecordmatcher" tabindex="-1"><code>getRecordMatcher</code> <a class="header-anchor" href="#getrecordmatcher" aria-hidden="true">#</a></h3><p>\u6839\u636E\u8DEF\u7531\u540D\u83B7\u53D6\u5BF9\u5E94<code>matcher</code>\u3002</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">getRecordMatcher</span><span class="token punctuation">(</span>name<span class="token operator">:</span> RouteRecordName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u5728<code>addRoute</code>\u6700\u540E\u8C03\u7528\u4E86<code>insertMatcher</code>\u8FDB\u884C<code>matcher</code>\u7684\u6DFB\u52A0\uFF0C\u8FD9\u91CC\u6211\u4EEC\u770B\u4E0B\u662F\u5982\u4F55\u6DFB\u52A0<code>marcher</code>\u7684</p><p>\u5728\u6DFB\u52A0<code>matcher</code>\u65F6\uFF0C\u5E76\u4E0D\u662F\u76F4\u63A5<code>matchers.add</code>\uFF0C\u800C\u662F\u6839\u636E<code>matcher.score</code>\u8FDB\u884C\u6392\u5E8F\u3002\u6BD4\u8F83\u5206\u6570\u65F6\u6839\u636E\u6570\u7EC4\u4E2D\u7684\u6BCF\u4E00\u9879\u6328\u4E2A\u6BD4\u8F83\uFF0C\u4E0D\u662F\u6BD4\u8F83\u603B\u5206\u3002</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">insertMatcher</span><span class="token punctuation">(</span>matcher<span class="token operator">:</span> RouteRecordMatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>
    i <span class="token operator">&lt;</span> matchers<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>
    <span class="token function">comparePathParserScore</span><span class="token punctuation">(</span>matcher<span class="token punctuation">,</span> matchers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path <span class="token operator">!==</span> matchers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>record<span class="token punctuation">.</span>path <span class="token operator">||</span>
      <span class="token operator">!</span><span class="token function">isRecordChildOf</span><span class="token punctuation">(</span>matcher<span class="token punctuation">,</span> matchers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
    i<span class="token operator">++</span>
  matchers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> matcher<span class="token punctuation">)</span>
  <span class="token comment">// only add the original record to the name map</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isAliasRecord</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">)</span>
    matcherMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">compareScoreArray</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> diff <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token keyword">return</span> diff

    i<span class="token operator">++</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> PathScore<span class="token punctuation">.</span>Static <span class="token operator">+</span> PathScore<span class="token punctuation">.</span>Segment
      <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span>
      <span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> b<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> PathScore<span class="token punctuation">.</span>Static <span class="token operator">+</span> PathScore<span class="token punctuation">.</span>Segment
      <span class="token operator">?</span> <span class="token number">1</span>
      <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">comparePathParserScore</span><span class="token punctuation">(</span>a<span class="token operator">:</span> PathParser<span class="token punctuation">,</span> b<span class="token operator">:</span> PathParser<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">const</span> aScore <span class="token operator">=</span> a<span class="token punctuation">.</span>score
  <span class="token keyword">const</span> bScore <span class="token operator">=</span> b<span class="token punctuation">.</span>score
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> aScore<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> bScore<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> comp <span class="token operator">=</span> <span class="token function">compareScoreArray</span><span class="token punctuation">(</span>aScore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> bScore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>comp<span class="token punctuation">)</span> <span class="token keyword">return</span> comp

    i<span class="token operator">++</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> bScore<span class="token punctuation">.</span>length <span class="token operator">-</span> aScore<span class="token punctuation">.</span>length
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>\u5047\u8BBE<code>matcherA</code>\u662F\u9700\u8981\u6DFB\u52A0\u7684\uFF0C<code>matchers</code>\u4E2D\u6B64\u65F6\u53EA\u6709\u4E00\u4E2A<code>matcherB</code>\uFF0C<code>matcherA.score=[[1, 2]]</code>\uFF0C<code>matcherB.score=[[1,3]]</code>\uFF0C\u90A3\u4E48<code>matcherA</code>\u662F\u600E\u4E48\u6DFB\u52A0\u5230<code>matchers</code>\u4E2D\u7684\u5462\uFF1F\u8FC7\u7A0B\u5982\u4E0B\uFF1A</p><ol><li>\u521D\u59CB\u5316<code>matchers</code>\u7D22\u5F15<code>i=0</code></li><li>\u9996\u5148\u6BD4\u8F83<code>matcherA.score[0][0]</code>\u4E0E<code>matcherB.score[0][0]</code>\uFF0C<code>matcherB.score[0][0]-matcherA.score[0][0] === 0</code>\u7EE7\u7EED\u6BD4\u8F83</li><li><code>matcherA.score[0][1]</code>\u4E0E<code>matcherB.score[0][1]</code>\uFF0C\u56E0\u4E3A<code>matcherB.score[0][1]-matcherA.score[0][1] &gt; 0</code>\uFF0C<code>i++</code></li><li><code>i=1</code>\u65F6\uFF0C\u7531\u4E8E<code>i=matchers.length</code>\uFF0C\u7ED3\u675F\u5FAA\u73AF</li><li>\u6267\u884C<code>matchers.splice(i, 0, matcher)</code>\uFF0C\u6B64\u65F6<code>i=1</code>,\u6240\u4EE5<code>matcherA</code>\u4F1A\u88AB\u6DFB\u52A0\u5230\u7D22\u5F15\u4E3A1\u7684\u4F4D\u7F6E</li></ol><p>\u5982\u679C<code>matcherA.score=[[1,3,4]]</code>\u5462\uFF1F \u5728\u6BD4\u8F83\u65F6\u56E0\u4E3A\u524D\u4E24\u4E2A\u7D22\u5F15\u5BF9\u5E94\u7684\u503C\u90FD\u662F\u4E00\u6837\u7684\uFF0C\u8FD9\u65F6\u4F1A\u8FDB\u5165<code>compareScoreArray</code>\u7684\u4EE5\u4E0B\u5206\u652F\uFF1A</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> b<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> PathScore<span class="token punctuation">.</span>Static <span class="token operator">+</span> PathScore<span class="token punctuation">.</span>Segment
    <span class="token operator">?</span> <span class="token number">1</span>
    <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u4EE5\u4E0A\u7ED3\u679C\u8FD4\u56DE-1\uFF0C<code>matcherA</code>\u4F1A\u88AB\u6DFB\u52A0\u5230\u7D22\u5F15\u4E3A0\u7684\u4F4D\u7F6E\u3002</p><p>\u5982\u679C<code>matcherA.score=[[1]]</code>\uFF0C\u8FDB\u5165<code>compareScoreArray</code>\u7684\u4EE5\u4E0B\u5206\u652F\uFF1A</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> PathScore<span class="token punctuation">.</span>Static <span class="token operator">+</span> PathScore<span class="token punctuation">.</span>Segment
    <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u56E0\u4E3A<code>matcherA.score[0].length === 1</code>\uFF0C\u8FD9\u65F6\u5C31\u9700\u8981\u8003\u8651<code>token</code>\u7684\u7C7B\u578B\u91CC\uFF0C\u5047\u8BBE<code>token</code>\u662F\u4E2A<code>Static</code>\u7C7B\u578B\u7684\uFF0C\u90A3\u4E48\u8FD4\u56DE-1\uFF0C<code>matcherA</code>\u6DFB\u52A0\u5230\u7D22\u5F15\u4E3A0\u7684\u4F4D\u7F6E\u3002\u5982\u679C<code>token</code>\u4E0D\u662F<code>Static</code>\u7C7B\u578B\u7684\uFF0C\u8FD4\u56DE1\uFF0C<code>matcherA</code>\u6DFB\u52A0\u5230\u7D22\u5F15\u4E3A1\u7684\u4F4D\u7F6E</p><p><strong>\u603B\u7ED3</strong></p><p>\u7ECF\u8FC7\u4E0A\u9762\u5206\u6790\uFF0C\u6211\u4EEC\u77E5\u9053\u4E86<code>routerMatcher</code>\u662F\u4EC0\u4E48\uFF0C\u5982\u4F55\u5B9E\u73B0\u7684</p><p><code>routerMatcher</code>\u4E2D\u901A\u8FC7\u7EF4\u62A4\u4E00\u4E2A<code>matchers</code>\u3001<code>matcherMap</code>\u6765\u5B9E\u73B0\u5BF9<code>matcher</code>\u7684\u589E\u5220\u6539\u67E5\uFF0C\u5176\u4E2D<code>matchers</code>\u4E2D\u662F\u6309<code>score</code>\u8FDB\u884C\u4E86\u6392\u5E8F\uFF0C<code>matcherMap</code>\u4E2D\u7684<code>key</code>\u662F\u6CE8\u518C\u8DEF\u7531\u65F6\u8DEF\u7531\u8868\u7684<code>name</code>\u3002</p><p><code>matchers</code>\u3001<code>matcherMap</code>\u5B58\u50A8\u7684\u662F<code>RouteRecordMatcher</code>\uFF0C<code>RouteRecordMatcher</code>\u4E2D\u5305\u542B\u4E86\u8DEF\u7531<code>path</code>\u5BF9\u5E94\u7684\u6B63\u5219<code>re</code>\u3001\u8DEF\u7531\u7684\u5206\u6570<code>score</code>\u3001\u52A8\u6001\u53C2\u6570\u5217\u8868<code>keys</code>\u3001\u53EF\u4ECE<code>path</code>\u4E2D\u63D0\u53D6\u52A8\u6001\u53C2\u6570\u7684<code>parse(path)</code>\u51FD\u6570\u3001\u53EF\u4F20\u5165\u53C2\u6570\u5BF9\u8C61\u5C06\u5176\u8F6C\u4E3A\u5BF9\u5E94<code>path</code>\u7684<code>stringify(param)</code>\u51FD\u6570\u3001\u7236<code>matcher</code>\uFF08<code>parent</code>\uFF09\u3001\u8DEF\u7531\u7684\u6807\u51C6\u5316\u7248\u672C<code>record</code>\u3001\u5B50<code>matcher</code>\uFF08<code>children</code>\uFF09\u3001\u7531\u522B\u540D\u4EA7\u751F\u7684<code>matcher</code>\uFF08<code>alias</code>\uFF09</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PathParser</span> <span class="token punctuation">{</span>
  re<span class="token operator">:</span> RegExp
  score<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
  keys<span class="token operator">:</span> PathParserParamKey<span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token function">parse</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> PathParams <span class="token operator">|</span> <span class="token keyword">null</span>
  <span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token operator">:</span> PathParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RouteRecordMatcher</span> <span class="token keyword">extends</span> <span class="token class-name">PathParser</span> <span class="token punctuation">{</span>
  record<span class="token operator">:</span> RouteRecord
  parent<span class="token operator">:</span> RouteRecordMatcher <span class="token operator">|</span> <span class="token keyword">undefined</span>
  children<span class="token operator">:</span> RouteRecordMatcher<span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// aliases that must be removed when removing this record</span>
  alias<span class="token operator">:</span> RouteRecordMatcher<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>\u5728\u751F\u6210<code>RouteRecordMatcher</code>\u7684\u8FC7\u7A0B\u4E2D\u4F1A\u5C06<code>path</code>\u8F6C\u6362\u6210<code>token</code>\u6570\u7EC4\uFF08\u4E8C\u7EF4\u6570\u7EC4\uFF0C\u7B2C\u4E00\u7EF4\u5EA6\u4E2D\u6BCF\u4E2A\u7EF4\u5EA6\u4EE3\u8868\u4E00\u7EA7\u8DEF\u7531\uFF0C\u7B2C\u4E8C\u7EF4\u5EA6\u4E2D\u6BCF\u4E2A\u7EF4\u5EA6\u4EE3\u8868\u8DEF\u7531\u7684\u7EC4\u6210\uFF09\uFF0C\u8DEF\u7531\u6B63\u5219\u7684\u751F\u6210\u3001\u52A8\u6001\u53C2\u6570\u7684\u63D0\u53D6\u3001\u5206\u6570\u7684\u8BA1\u7B97\u3001<code>stringify</code>\u5168\u90FD\u4F9D\u6258\u8FD9\u4E2A<code>token</code>\u6570\u7EC4\u5B9E\u73B0</p>`,73),o=[t];function c(l,r,u,i,k,b){return a(),s("div",null,o)}var h=n(e,[["render",c]]);export{d as __pageData,h as default};
